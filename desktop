

local deskID = process.id()
local deskRedirect = process.windowCompositor:newBuffer()

process.addHook(deskID, {"key", 59})

local runHistory = {}
if fs.exists("/.lyqrunhistory") then
        local histFile=io.open("/.lyqrunhistory","r")
        if histFile then
                for line in histFile:lines() do
                        table.insert(runHistory, line)
                end
                histFile:close()
        end
end

local function getLws()
        for k,v in pairs(process.processTable) do
                if v.path == "lws" then
                        return k
                end
        end
        return nil
end

local function runProgram()
        local desk = process.id()
        process.processTable[desk].special = true
        process.processTable[desk].window = window.new(30, 3, 2, 2, "Run Program", windowCompositor:newBuffer())
        process.processTable[desk].window:setDecorations(term.isColor() and "pretty_menu" or "standard")
        process.focusWindow = desk

        term.redirect(processTable[process.focusWindow].window.redirect)
        term.setTextColor(colors.white)
        term.setBackgroundColor(colors.black)
        write("> ")
        local success, line = pcall(read, nil, runHistory)
        --clean up window
        term.restore()

        process.processTable[desk].window:destroy()
        process.processTable[desk].window = nil
        process.processTable[desk].special = nil
        if success then
                --don't save empty or repeated lines
                if line ~= "" and (#runHistory == 0 or line ~= runHistory[#runHistory]) then
                        --should never be able to get above 255, but just in case, the while doesn't hurt
                        table.insert(runHistory,line)                
                        while #runHistory>255 do
                                table.remove(runHistory, 1)
                        end
                        --update history on disk
                        local histFile=io.open("/.lyqrunhistory","w")
                        if histFile then
                                for i=1, #runHistory do
                                        histFile:write(runHistory[i].."\n")
                                end
                                histFile:close()
                        end
                end
                if line ~= "" then
                        local args = {}
                        for match in string.gmatch( line, "[^ \t]+" ) do
                                table.insert( args, match )
                        end
                        --fix for previously-changed working directory
                        shell.setDir("")
                        path = shell.resolveProgram(table.remove(args, 1))
                        if path then
                                local w, h, x, y, max = 19, 9, 1, 1, "false"
                                for dNum, dInfo in ipairs(windowDimensions) do
                                        if dInfo.path == path then
                                                w = dInfo.w
                                                h = dInfo.h
                                                x = dInfo.x
                                                y = dInfo.y
                                                max = dInfo.max
                                                break
                                        end
                                end
                                local win = window.new(w, h, x, y, fs.getName(path), process.windowCompositor:newBuffer())
                                if windowCompositor.target.isColor() then
                                        win:setType("standard")
                                        win:setDecorations("pretty")
                                end
                                if max == "true" then win:maximize() end
                                process.add(function() shell.run(path, unpack(args)) end, path, win)
                                if coroutine.status(process.processTable[process.focusWindow].thread) == "dead" then
                                        process.queueEvent(lws, "close_window", process.focusWindow)
                                end
                        end
                end
        end
end

--set up initial view.
local titlebarFillChar = deskRedirect.isColor() and " " or "="
deskRedirect.clear()
local x, y = deskRedirect.getSize()
deskRedirect.buffer.text[1] = titlebarFillChar.."WolfOS"..string.rep(titlebarFillChar, x - 8)
if deskRedirect.isColor() then
        deskRedirect.buffer.textColor[1] = "fbbbbbbb"..string.rep("f", x - 8)
        deskRedirect.buffer.backColor[1] = string.rep("8", x)
        for i=2, y do
                deskRedirect.buffer.backColor[i] = string.rep("3", x)
        end
end

local titlebarItems
local tasksClickable

while true do
        local event = {os.pullEvent()}
        if event[1] == "redraw" then
                titlebarItems = {}
                for i=1, #process.processTable do
                        if process.processTable[i] and process.processTable[i].window and not process.processTable[i].special then
                                local tBarEntry = {pID = i, text = process.processTable[i].window.caption}
                                table.insert(titlebarItems, tBarEntry)
                        end
                end
                local taskText = ""
                tasksClickable = 0
                local usableWidth = x - 10
                for eNum, eInfo in ipairs(titlebarItems) do
                        if #taskText + 9 > usableWidth then
                                if #taskText > 9 then
                                        taskText = string.sub(taskText, 1, -10).."More... |"
                                end
                                break
                        end
                        local str = string.sub(eInfo.text, 1, 8)
                        str = str..string.rep(" ", 8 - #str)
                        if taskText == "" then taskText = "|" end
                        taskText = taskText..str.."|"
                        tasksClickable = tasksClickable + 1
                end
                deskRedirect.buffer.text[1] = titlebarFillChar.."WolfOS"..titlebarFillChar..taskText..string.rep(titlebarFillChar, x - (#taskText + 9))
        elseif event[1] == "run_program" then
                runProgram()
        elseif event[1] == "key" and event[2] == 59 then
                runProgram()
        elseif event[1] == "mouse_click" then
                if event[4] == 1 then
                        --click on titlebar with no window covering it.
                        if event[3] > 1 and event[3] < 9 and event[2] == 1 then
                                --clicked on the WolfOS button
                                runProgram()
                        elseif event[3] > 9 then
                                --clicked on task bar.
                                clickItem = math.floor((event[3] - 1) / 9)
                                if (event[3] - 10 ) % 9 ~= 0 and clickItem <= tasksClickable then
                                        --they clicked on the name itself, not the boundary line.
                                        if clickItem == tasksClickable and clickItem < #titlebarItems then
                                                --display the window choice dialog
                                                if process.processTable[process.focusWindow] then
                                                        process.queueEvent(getLws(), "select_window")
                                                end
                                        else
                                                if process.focusWindow ~= titlebarItems[clickItem].pID then
                                                        process.focusWindow = titlebarItems[clickItem].pID
                                                end
                                                process.toFront(process.focusWindow)
                                                if process.processTable[process.focusWindow].window.minimized then process.processTable[process.focusWindow].window:unMinimize() end
                                                if event[2] == 2 then
                                                        --they right-clicked, so let's also display the window action menu.
                                                        process.queueEvent(getLws(), "window_action", process.focusWindow, process.processTable[process.focusWindow].window)
                                                end
                                        end
                                end
                        end
                end
        end
end
