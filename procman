if fs.exists("/WolfOS") and fs.isDir("/WolfOS") then shell.setPath(shell.path()..":/WolfOS") end

if not framebuffer then if fs.exists("/WolfOS/framebuffer") then if not os.loadAPI("/WolfOS/framebuffer") then print("Could not load framebuffer API!") return end else print("Could not find framebuffer API!") return end end
if not compositor then if fs.exists("/WolfOS/compositor") then if not os.loadAPI("/WolfOS/compositor") then print("Could not load compositor API!") return end else print("Could not find compositor API!") return end end
if not menu then if fs.exists("/WolfOS/menu") then if not os.loadAPI("/WolfOS/menu") then print("Could not load menu API!") return end else print("Could not find menu API!") return end end
if not process then if fs.exists("/WolfOS/process") then if not os.loadAPI("/WolfOS/process") then print("Could not load process API!") return end else print("Could not find process API!") return end end
if not window then if fs.exists("/WolfOS/window") then if not os.loadAPI("/WolfOS/window") then print("Could not load window API!") return end else print("Could not find window API!") return end end

if process.activeProcess ~= nil then return end

processTable = {}
process.focusWindow = nil
windowCompositor = compositor.new()
windowCompositor.deferDraw = true
rawset(process, "windowCompositor", windowCompositor)
rawset(process, "processTable", processTable)
do
	local x, y = term.getSize()
	process.nullRedirect = framebuffer.new(x, y, term.isColor())
end

dofile(shell.resolveProgram("env"))

do
	local initPath = ""
	if fs.exists("/WolfOS/.init") then
		initPath = "/WolfOS/.init"
	else
		initPath = shell.resolveProgram(".init")
	end
	if #initPath > 0 then
		local handle = io.open(initPath, "r")
		if handle then
			for line in handle:lines() do
				process.add(function() shell.run(line) end, (string.match(line, "^(%S*)")))
			end
			handle:close()
		end
	end
end

local desktop = process.getIDFromName("desktop")
if not desktop then error("No desktop initialized!") end

windowDimensions = {}
winDims = io.open("/.lyqwin", "r")
if winDims then
	for line in winDims:lines() do
		local dimEntry = {}
		dimEntry.x, dimEntry.y, dimEntry.w, dimEntry.h, dimEntry.max, dimEntry.path = string.match(line, "(%d+),(%d+),(%d+),(%d+),(%a+),(.*)")
		if dimEntry.x and dimEntry.path then
			table.insert(windowDimensions, dimEntry)
		end
	end
	winDims:close()
end

local function findHook(event)
	local ref = process.eventHooks
	for i = 1, #event do
		if ref[event[i]] then
			if type(ref[event[i]]) == "table" then
				ref = ref[event[i]]
			elseif type(ref[event[i]]) == "number" then
				return ref[event[i]]
			end
		else
			return false
		end
	end
end

local function distributeEvent(event)
	if processTable[process.focusWindow] then
		process.resume(process.focusWindow, event)
	elseif event[1] == "key" or event[1] == "char" then
		if desktop then
			--events should fall through to desktop if there is no focus window.
			process.resume(desktop, event)
		end
	end
	--handle background processes.
	if event[1] ~= "key" and event[1] ~= "char" and event[1] ~= "mouse_click" and event[1] ~= "mouse_drag" and event[1] ~= "mouse_scroll" and event[1] ~= "window_resize" and event[1] ~= "terminate" then
		for tNum, tInfo in ipairs(processTable) do
			if tNum ~= process.focusWindow and tInfo then
				process.resume(tNum, event)
			end
		end
	end
end

--causes initial desktop and title bar to draw.
windowCompositor:draw()

while true do
	--process individually-queued events.
	for i=1, #processTable do
		process.check(i)
		if processTable[i] and processTable[i].queue and #processTable[i].queue >= 1 then
			repeat
				process.resume(i, table.remove(processTable[i].queue, 1))
			until #processTable[i].queue == 0
		end
	end
	--build title bar items.
	process.resume(desktop, {"redraw"})

	event = {coroutine.yield()}

	--process event hooks, like lws and desktop use for hotkeys.
	if process.eventHooks[event[1]] then
		local pID = findHook(event)
		if pID then
			event = {process.resume(pID, event)}
		end
	end

	if #event > 0 then
		distributeEvent(event)
	end
end
